ct <- ct + 1
# if full taxonomic names do not have all the ranks fill with NAs
if ( length(tx) < tx_no ) tx[(length(tx)+1):tx_no] <- NA
tax_tbl[ct,tax_tbl] <- tx[1:tx_no]
}
return(tax_tbl)
}
m <- tax_to_physeq(full_tax = metananopype$data$tax_tbl$Taxonomy)
m
# create function to parse tax into tax_table() for phyloseq
tax_to_physeq <- function(full_tax, split_by = "; ",
tax_ranks = c("Kingdom", "Phylum",
"Class", "Order",
"Family", "Genus",
"Species")) {
# 'tax_to_physeq()': convert a vector with full taxonomic
#names into a data frame with the different taxonomic names
#separated by taxonomic rank.
# 'full_tax': character vector with full taxonomic names, e.g.,
#"Bacteria; Actinobacteriota; Acidimicrobiia; Microtrichales; Ilumatobacteraceae; uncultured".
# 'split_by': character symbol to split the full taxonomic
#names. By default is '; '.
# 'tax_ranks': character vector of taxonomic ranks to use
#to build the taxonomic data frame. If a rank does not exist
#it will be filled in with NAs.
# build data frame
tax_tbl <- data.frame(
stringsAsFactors = FALSE
)
tx_no <- length(tax_ranks)
# split full taxonomy
tax = lapply(full_tax, function(x) strsplit(x = x, split = split_by)[[1]])
# loop over each full taxonomic name and fill the table
ct <- 0
for ( tx in tax ) {
ct <- ct + 1
# if full taxonomic names do not have all the ranks fill with NAs
if ( length(tx) < tx_no ) tx[(length(tx)+1):tx_no] <- NA
tax_tbl[ct, tax_ranks] <- tx[1:tx_no]
}
return(tax_tbl)
}
m <- tax_to_physeq(full_tax = metananopype$data$tax_tbl$Taxonomy)
m
m$Kingdom %>% table
metananopype$data$kraken2$ERR4822680
1:1-1
1:(1-1)
m
a
b
b[1:(1-1)]
b[0:(1-1)]
b[0:1]
b[0:(1-1)]
c(b[0:(1-1)], "A")
c(b[0:(2-1)], "A")
#-------------------------------------------------------------------------------------------
## Pipeline
# import packages
library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = metananopype$data$tax_tbl,
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
metananopype$data$tax_tbl$Taxonomy
m <- tax_to_physeq(full_tax = metananopype$data$tax_tbl$Taxonomy)
m$Kingdom %>% table
library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = metananopype$data$tax_tbl,
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
m <- tax_to_physeq(full_tax = metananopype$data$tax_tbl$Taxonomy)
m$Kingdom %>% table
m
head(metananopype$data$tax_tbl)
## Pipeline
# import packages
library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = cbind("Seq_id" = rownames(metananopype$data$tax_tbl),
metananopype$data$tax_tbl),
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
metananopype$data$tax_tbl$Taxonomy %>% head
metananopype$data$tax_tbl[["Taxonomy"]] %>% head
metananopype$data$tax_tbl
# Import into phyloseq
full_tax <- metananopype$data$tax_tbl
names(full_tax) <- rownames(metananopype$data$tax_tbl)
head()
head(full_tax)
# Import into phyloseq
full_tax <- metananopype$data$tax_tbl$Taxonomy
names(full_tax) <- rownames(metananopype$data$tax_tbl)
head(full_tax)
names(full_tax) <- row.names(metananopype$data$tax_tbl)
library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = cbind("Seq_id" = rownames(metananopype$data$tax_tbl),
metananopype$data$tax_tbl),
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
# Import into phyloseq
full_tax <- metananopype$data$tax_tbl$Taxonomy
names(full_tax) <- row.names(metananopype$data$tax_tbl)
full_tax
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
source("./metaNanoPype_helper_funs.R")
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
head(tax_tbl)
as.matrix(head(tax_tbl))
source("./metaNanoPype_helper_funs.R")
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
tax_tbl
colnames(metananopype$data$tax_tbl)
head(metananopype$data$tax_tbl)
head(metananopype$data$tax_tbl[,-1])
?otu_table
# 'otu_table
otu_tbl <- phyloseq::otu_table(object = as.matrix(metananopype$data$tax_tbl[,-1]),
taxa_are_rows = TRUE)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl)
physeq
plot_bar(physeq)
plot_bar(physeq, fill = "Phylum")
plot_richness(physeq)
plot_ordination(physeq)
# Plot alpha diversity
ord <- phyloseq::ordinate(physeq = physeq, method = "PCoA", distance = "bray")
phyloseq::plot_ordination(physeq = physeq, ordination = ord)
phyloseq::plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
physeq
physeq@sam_data
files2import
metadata
# 'sam_data'
metadata <- data.frame("Samples" = col.names(metananopype$data$tax_tbl[,-1]))
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# 'sam_data'
metadata <- data.frame("Samples" = col.names(metananopype$data$tax_tbl[,-1]))
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]))
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
physeq
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
metadata
sample_names(otu_tbl)
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
stringsAsFactors = FALSE)
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
physeq
# Plot beta diversity
ord <- phyloseq::ordinate(physeq = physeq, method = "PCoA", distance = "bray")
phyloseq::plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
phyloseq::plot_ordination(physeq = physeq, ordination = ord, label = "Samples")
# Plot beta diversity
ord <- phyloseq::ordinate(physeq = physeq, method = "PCoA", distance = "bray")
phyloseq::plot_ordination(physeq = physeq, ordination = ord, label = "Samples")
phyloseq::plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples")
sample_data(physeq)
sample_variables(physeq)
phyloseq::plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples")
plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples")
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples")
#library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = cbind("Seq_id" = rownames(metananopype$data$tax_tbl),
metananopype$data$tax_tbl),
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
## Import into phyloseq
# 'tax_table'
full_tax <- metananopype$data$tax_tbl$Taxonomy
names(full_tax) <- row.names(metananopype$data$tax_tbl)
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
# 'otu_table
otu_tbl <- phyloseq::otu_table(object = as.matrix(metananopype$data$tax_tbl[,-1]),
taxa_are_rows = TRUE)
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
stringsAsFactors = FALSE)
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot taxonomy
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples")
plot_ordination(physeq = physeq, ordination = ord, type = "samples", color = "Samples", label = TRUE)
plot_ordination(physeq = physeq, ordination = ord, type = "samples", label = TRUE)
plot_ordination(physeq = physeq, ordination = ord, type = "samples", label = "Samples")
plot_ordination(physeq = physeq, ordination = ord, label = "Samples")
plot_ordination(physeq = physeq, ordination = ord)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord)
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
ordinate(physeq = physeq, method = "PCoA", distance = "bray")
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord)
sample_data(physeq)$Samples
#-------------------------------------------------------------------------------------------
## Pipeline
# import packages
#library("dplyr")
library("phyloseq")
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = cbind("Seq_id" = rownames(metananopype$data$tax_tbl),
metananopype$data$tax_tbl),
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
## Import into phyloseq
# 'tax_table'
full_tax <- metananopype$data$tax_tbl$Taxonomy
names(full_tax) <- row.names(metananopype$data$tax_tbl)
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
# 'otu_table
otu_tbl <- phyloseq::otu_table(object = as.matrix(metananopype$data$tax_tbl[,-1]),
taxa_are_rows = TRUE)
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
stringsAsFactors = FALSE)
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord)
plot_ordination(physeq = physeq,ord)
physeq
otu_table(physeq)
tax_table(physeq)
sample_table(physeq)
sample_data(physeq)
sample_data(physeq)$Samples
plot_ordination(physeq = physeq, ordination = ord)
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
"SampleType" = colnames(metananopype$data$tax_tbl[,-1]))
#stringsAsFactors = FALSE)
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
metadata
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord)
plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]))
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
"SampleType" = colnames(metananopype$data$tax_tbl[,-1]))
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
physeq <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot taxonomy
# Plot alpha diversity
phyloseq::plot_richness(physeq = physeq)
# Plot beta diversity
ord <- ordinate(physeq = physeq, method = "PCoA", distance = "bray")
plot_ordination(physeq = physeq, ordination = ord, color = "Samples")
# Plot taxonomy
phyloseq::plot_bar(physeq = physeq, fill = "Phylum")
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
message = FALSE,
warning = FALSE
)
datatable(data = metananopype$data$tax_tbl, extensions = "Buttons", caption = "Taxonomic abundance table.",
options = list(dom = "Blfrtip", buttons = c('csv', 'excel')))
## Set seed
set.seed(seed = 1024) # to keep reproducibility
## Import packages
library("DT", quietly = TRUE)
library("phyloseq", quietly = TRUE)
source("./metaNanoPype_helper_funs.R")
# Import data
metananopype[["params"]] <- metananopype[["data"]] <- metananopype <- list()
metananopype$params[["tax_path"]] <- "~/Downloads/workstation"
metananopype$params[["out_path"]] <- "~/Downloads/workstation/results"
files2import <- list.files(path = metananopype$params$tax_path,
pattern = "\\.report", full.names = TRUE)
metananopype$params[["samples"]] <- gsub(pattern = ".report", replacement = "",
x = basename(files2import))
metananopype$data[["kraken2"]] <- lapply(X = setNames(files2import, metananopype$params$samples),
function(x, y = "\t", z = FALSE) read.table(file = x, sep = y, stringsAsFactors = z),
y = "\t", z = FALSE)
# Parse table
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2, function(x) parse_kraken2_report(x))
metananopype$data[["kraken2_parsed"]] <- lapply(metananopype$data$kraken2_parsed,
function(x, cols2sel = c(1,3)) x[,cols2sel], cols2sel = c(1,3))
for ( x in names(metananopype$data$kraken2_parsed)) colnames(metananopype$data$kraken2_parsed[[x]])[2] <- x
metananopype$data[["tax_tbl"]] <- merge_tax_tbl(list_tbls = metananopype$data$kraken2_parsed, merge_by = "Taxonomy")
# save table
if ( ! dir.exists(metananopype$params$out_path) ) dir.create(metananopype$params$out_path, recursive = TRUE)
write.table(x = cbind("Seq_id" = rownames(metananopype$data$tax_tbl),
metananopype$data$tax_tbl),
file = paste(metananopype$params$out_path, "taxonomic_abundance_tbl.tsv", sep = "/"),
sep = "\t", row.names = FALSE)
datatable(data = metananopype$data$tax_tbl, extensions = "Buttons", caption = "Taxonomic abundance table.",
options = list(dom = "Blfrtip", buttons = c('csv', 'excel')))
metananopype[["plots"]] <- list()
# Plot taxonomy
metananopype[["plots"]][["tax"]][["phyla"]] <- metananopype[["plots"]][["tax"]] <- list()
# Plot taxonomy
metananopype[["plots"]][["tax"]][["phyla"]] <- metananopype[["plots"]][["tax"]] <- list()
metananopype[["plots"]][["tax"]][["phyla"]] <- phyloseq::plot_bar(physeq = metananopype$data[["physeq"]], fill = "Phylum")
## Import into phyloseq
# 'tax_table'
full_tax <- metananopype$data$tax_tbl$Taxonomy
names(full_tax) <- row.names(metananopype$data$tax_tbl)
tax_tbl <- tax_to_physeq(full_tax = full_tax, split_by = "; ")
# 'otu_table
otu_tbl <- phyloseq::otu_table(object = as.matrix(metananopype$data$tax_tbl[,-1]),
taxa_are_rows = TRUE)
# 'sam_data'
metadata <- data.frame("Samples" = colnames(metananopype$data$tax_tbl[,-1]),
"SampleType" = colnames(metananopype$data$tax_tbl[,-1]))
row.names(metadata) <- metadata$Samples
metadata <- sample_data(metadata)
# phyloseq obj
metananopype$data[["physeq"]] <- phyloseq::phyloseq(otu_tbl, tax_tbl, metadata)
# Plot taxonomy
metananopype[["plots"]][["tax"]][["phyla"]] <- metananopype[["plots"]][["tax"]] <- list()
metananopype[["plots"]][["tax"]][["phyla"]] <- phyloseq::plot_bar(physeq = metananopype$data[["physeq"]], fill = "Phylum")
library("ggplot2", quietly = TRUE)
ggsave(filename = paste(metananopype$params[["out_path"]], "phyla_tax_barplot.pdf", sep = "/"),
plot = metananopype[["plots"]][["tax"]][["phyla"]])
print(metananopype[["plots"]][["tax"]][["phyla"]])
# Plot alpha diversity
metananopype[["plots"]][["div"]][["alpha"]] <- metananopype[["plots"]][["div"]][["beta"]] <- list()
# Plot alpha diversity
metananopype[["plots"]][["div"]][["alpha"]] <- list()
metananopype[["plots"]][["div"]][["alpha"]] <- phyloseq::plot_richness(physeq = metananopype$data[["physeq"]])
ggsave(filename = paste(metananopype$params[["out_path"]], "alpha_div_dotplot.pdf", sep = "/"),
plot = metananopype[["plots"]][["div"]][["alpha"]])
print(metananopype[["plots"]][["div"]][["alpha"]])
# Plot beta diversity
metananopype[["plots"]][["div"]][["beta"]] <- list()
metananopype$data[["ord"]] <- phyloseq::ordinate(physeq = metananopype$data[["physeq"]],
method = "PCoA", distance = "bray")
metananopype[["plots"]][["div"]][["beta"]] <- phyloseq::plot_ordination(physeq = metananopype$data[["physeq"]],
ordination = metananopype$data[["ord"]],
color = "Samples")
ggsave(filename = paste(metananopype$params[["out_path"]], "beta_div_plot.pdf", sep = "/"),
plot = metananopype[["plots"]][["div"]][["beta"]])
print(metananopype[["plots"]][["div"]][["beta"]])
This report was built with the `rmarkdown` R package (v.`r packageVersion("rmarkdown")`) [@rmarkdown_1; @rmarkdown_2; @rmarkdown_3]. The R version used was `r paste0(version$major, ".", version$minor)` [@r]. The taxonomic and divesity analyses were done with the `phyloseq` R package (v.`packageVersion("phyloseq")`) See the full list of packages and versions used at the end of this report - **R packages used and respective versions**.
packageVersion("phyloseq")
citation("phyloseq")
?rmarkdown::render
list.files(path = ".", pattern = "\\.report", full.names = TRUE)
list.files(path = "./", pattern = "\\.report", full.names = TRUE)
getwd()
list.files(path = "$PWD/./", pattern = "\\.report", full.names = TRUE)
